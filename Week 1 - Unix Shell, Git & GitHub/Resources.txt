BASH CHEAT SHEET:
https://devhints.io/bash

IN NOTE FORM:
https://github.com/RehanSaeed/Bash-Cheat-Sheet?tab=readme-ov-file

#Takes to the parent path
cd ..

#What if we want to move just the contents of dir1 to another directory rather than the whole folder?
mv dir1/* dir2

#to copy/remove a whole directory add "-r"
cp -r directoryname
rm -r directoryname

#list down the contents of a directory in a text file
ls>> dirlist.txt

#delete PERMANENTLY all the files in a directory
rm -rf "directory"

#go to last directory
cd - 

#find a file anywhere in the computer
find . -name 2*
#here "." means the current directory, 'name' is the pattern, "2" is any file that STARTS with 2 and * is the wild card like excel

#instead of opening up a window, make comment in VS
git commit -m "Completed xyz"

#when we want to add a branch in git and save a file there. here "-b" b means branch, it will switch it a new branch with the name called assignment
git checkout -b assignment

#switch to branches
git switch "branch name" without quote unquote

#when we accidentally saved codes in a wrong branch, we check log, tak the commit code of the previous perfect branch, and switch back to that. here "-c" means create a new branch and immediately switch to that/override.

FIRST SWITCH TO THE BRANCH WHERE YOU'VE ACCIDENTALLY SAVED/CHANGED A FILE
git log
git switch -C main *CODE*
git push origin main --force (WE DO NOT WANT TO DO THIS ALWAYS, BE CAREFUL)

#to know how many branches i have ON MY LAPTOP
git branch -v

#to know how many branches i have remote
git branch -r -rv

#to delete a branch
git branch -d *branch name*

#Lists both remote-tracking branches and the latest commit on each remote branch
git branch -rv

#to create a new branch
git init -b


#Git creates a new branch called 'main/or any name" and SWITCH to it ; checkout MEANS switch
git checkout -b main

#To tell the laptop which git repo i'll be using to save the file
git remote add "origin/ANY NAME https://github.com/peeu32/friendly-octo-chainsaw.git/THE LINK"

#To pull a file from Git, put the name
git pull "origin/whatever name" main
OR
git pull 'link of the git repo' coworker-changes --no-rebase

#to check who and when any changes was made to your file
git log

You can open your the same file you've worked on, your last saved file from your laptop, and it will show the changes the other person had made


#to know how many branches i have REMOTE
git remote -v

#to add a git remote
git remote add "name" "link of your repo, only till username"

Delete the branch on git only on git, deleting a branch in your own directory will not delete git branch

#Whenever you work on a file and want to push to git, always
git status (to see if git.com has any changes compared to my local file ,"Your branch is ahead of 'origin/main' by 1 commit.")
git fetch (this makes GitHub.com aware that i have made a change locally
git status (this will say that there is a diversion - "Your branch and 'origin/main' have diverged, and have 1 and 1 different commits each, respectively.")
git pull (to SEE what changes have been made on git)

#Create a file named ./data/inventory.txt that lists all the FILES in the subfolders of ./data/processed
find data/processed -type f > data/inventory.txt

#Create a file named ./data/inventory.txt that lists all the FILES in the subfolders of ./data/processed. It lists the folder name followed by list of file names
ls >> data/inventory.txt data/processed/*










#COMMAND HISTORY

!!            # Run the last command

touch foo.sh
chmod +x !$   # !$ is the last argument of the last command i.e. foo.sh

pwd                       # Print working directory path
history                   # List all the past commands
history | tail            # List the last few commands
ls                        # List directories
ls -a|--all               # List directories including hidden
ls -l                     # List directories in long form
ls -l -h|--human-readable # List directories in long form with human readable sizes
ls -t                     # List directories by modification time, newest first
stat foo.txt              # List size, created and modified timestamps for a file
stat foo                  # List size, created and modified timestamps for a directory
tree                      # List directory and file tree
tree -a                   # List directory and file tree including hidden
tree -d                   # List directory tree
cd foo                    # Go to foo sub-directory
cd                        # Go to home directory
cd ~                      # Go to home directory
cd -                      # Go to last directory
pushd foo                 # Go to foo sub-directory and add previous directory to stack
popd                      # Go back to directory in stack saved by `pushd`



#NAVIGATING DIRECTORIES

mkdir foo                        # Create a directory
mkdir foo bar                    # Create multiple directories
mkdir -p|--parents foo/bar       # Create nested directory
mkdir -p|--parents {foo,bar}/baz # Create multiple nested directories

mktemp -d|--directory            # Create a temporary directory


#CREATING DIRECTORIES

mkdir foo                        # Create a directory
mkdir foo bar                    # Create multiple directories
mkdir -p|--parents foo/bar       # Create nested directory
mkdir -p|--parents {foo,bar}/baz # Create multiple nested directories

mktemp -d|--directory            # Create a temporary directory


#MOVING DIRECTORIES

cp -R|--recursive foo bar                               # Copy directory
mv foo bar                                              # Move directory

rsync -z|--compress -v|--verbose /foo /bar              # Copy directory, overwrites destination
rsync -a|--archive -z|--compress -v|--verbose /foo /bar # Copy directory, without overwriting destination
rsync -avz /foo username@hostname:/bar                  # Copy local directory to remote directory
rsync -avz username@hostname:/foo /bar                  # Copy remote directory to local directory


#DELETING DIRECTORIES

rmdir foo                        # Delete empty directory
rm -r|--recursive foo            # Delete directory including contents
rm -r|--recursive -f|--force foo # Delete directory including contents, ignore nonexistent files and never prompt


CREATING FILES

touch foo.txt          # Create file or update existing files modified timestamp
touch foo.txt bar.txt  # Create multiple files
touch {foo,bar}.txt    # Create multiple files
touch test{1..3}       # Create test1, test2 and test3 files
touch test{a..c}       # Create testa, testb and testc files

mktemp                 # Create a temporary file


#STANDARD OUTPUT, STANDARD ERROR, STANDARD INPUT

echo "foo" > bar.txt       # Overwrite file with content
echo "foo" >> bar.txt      # Append to file with content

ls exists 1> stdout.txt    # Redirect the standard output to a file
ls noexist 2> stderror.txt # Redirect the standard error output to a file
ls 2>&1 > out.txt          # Redirect standard output and error to a file
ls > /dev/null             # Discard standard output and error

read foo                   # Read from standard input and write to the variable foo


#MOVING FILES

cp foo.txt bar.txt                                # Copy file
mv foo.txt bar.txt                                # Move file

rsync -z|--compress -v|--verbose /foo.txt /bar    # Copy file quickly if not changed
rsync z|--compress -v|--verbose /foo.txt /bar.txt # Copy and rename file quickly if not changed


#DELETING FILES

rm foo.txt            # Delete file
rm -f|--force foo.txt # Delete file, ignore nonexistent files and never prompt


#READING FILES

cat foo.txt            # Print all contents
less foo.txt           # Print some contents at a time (g - go to top of file, SHIFT+g, go to bottom of file, /foo to search for 'foo')
head foo.txt           # Print top 10 lines of file
tail foo.txt           # Print bottom 10 lines of file
open foo.txt           # Open file in the default editor
wc foo.txt             # List number of lines words and characters in the file



#FILE PERMISSIONS

#	Permission	        rwx	Binary
7	read, write and execute	rwx	111
6	read and write	        rw-	110
5	read and execute	r-x	101
4	read only	        r--	100
3	write and execute	-wx	011
2	write only	        -w-	010
1	execute only	        --x	001
0	none	                ---	000
For a directory, execute means you can enter a directory.

User	Group	Others	Description
6	4	4	User can read and write, everyone else can read (Default file permissions)
7	5	5	User can read, write and execute, everyone else can read and execute (Default directory permissions)


u - User
g - Group
o - Others
a - All of the above


ls -l /foo.sh            # List file permissions
chmod +100 foo.sh        # Add 1 to the user permission
chmod -100 foo.sh        # Subtract 1 from the user permission
chmod u+x foo.sh         # Give the user execute permission
chmod g+x foo.sh         # Give the group execute permission
chmod u-x,g-x foo.sh     # Take away the user and group execute permission
chmod u+x,g+x,o+x foo.sh # Give everybody execute permission
chmod a+x foo.sh         # Give everybody execute permission
chmod +x foo.sh          # Give everybody execute permission


#FINDING FILES

#Find binary files for a command.

type wget                                  # Find the binary
which wget                                 # Find the binary
whereis wget                               # Find the binary, source, and manual page files


#'locate' uses an index and is fast.

updatedb                                   # Update the index

locate foo.txt                             # Find a file
locate --ignore-case                       # Find a file and ignore case
locate f*.txt                              # Find a text file starting with 'f'


#'find' doesn't use an index and is slow.

find /path -name foo.txt                   # Find a file
find /path -iname foo.txt                  # Find a file with case insensitive search
find /path -name "*.txt"                   # Find all text files
find /path -name foo.txt -delete           # Find a file and delete it
find /path -name "*.png" -exec pngquant {} # Find all .png files and execute pngquant on it
find /path -type f -name foo.txt           # Find a file
find /path -type d -name foo               # Find a directory
find /path -type l -name foo.txt           # Find a symbolic link
find /path -type f -mtime +30              # Find files that haven't been modified in 30 days
find /path -type f -mtime +30 -delete      # Delete files that haven't been modified in 30 days


#FIND IN FILES

grep 'foo' /bar.txt                         # Search for 'foo' in file 'bar.txt'
grep 'foo' /bar -r|--recursive              # Search for 'foo' in directory 'bar'
grep 'foo' /bar -R|--dereference-recursive  # Search for 'foo' in directory 'bar' and follow symbolic links
grep 'foo' /bar -l|--files-with-matches     # Show only files that match
grep 'foo' /bar -L|--files-without-match    # Show only files that don't match
grep 'Foo' /bar -i|--ignore-case            # Case insensitive search
grep 'foo' /bar -x|--line-regexp            # Match the entire line
grep 'foo' /bar -C|--context 1              # Add N line of context above and below each search result
grep 'foo' /bar -v|--invert-match           # Show only lines that don't match
grep 'foo' /bar -c|--count                  # Count the number lines that match
grep 'foo' /bar -n|--line-number            # Add line numbers
grep 'foo' /bar --colour                    # Add colour to output
grep 'foo\|bar' /baz -R                     # Search for 'foo' or 'bar' in directory 'baz'
grep --extended-regexp|-E 'foo|bar' /baz -R # Use regular expressions
egrep 'foo|bar' /baz -R                     # Use regular expressions


